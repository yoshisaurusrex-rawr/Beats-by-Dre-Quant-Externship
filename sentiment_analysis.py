# -*- coding: utf-8 -*-
"""Sentiment Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JmMgrs2QVhtlx1mpjHMjsXUUmLKAZhcZ
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from textblob import TextBlob

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('cleaned_final.csv')

# apply sentiment analysis

df['polarity'] = df['content'].apply(lambda x: TextBlob(x).sentiment.polarity)
df['subjectivity'] = df['content'].apply(lambda x: TextBlob(x).sentiment.subjectivity)

print(df[['polarity', 'subjectivity']])

plt.hist(df['polarity'], bins=20, color='skyblue', edgecolor='black')
plt.title=("Distribution of Polarity Scores in Reviews")
plt.xlabel("Polarity")
plt.ylabel("Frequency")
plt.show()

plt.hist(df['subjectivity'], bins=20, color='skyblue', edgecolor='black')
plt.title=("Distribution of Subjectivity Scores in Reviews")
plt.xlabel("Subjectivity")
plt.ylabel("Frequency")
plt.show()

sns.scatterplot(x='polarity', y='subjectivity', data=df, color='skyblue', alpha=0.5)
plt.title=("Polarity vs. Subjectivity")
plt.xlabel("Polarity")
plt.ylabel("Subjectivity")
plt.show()

def categorize_sentiment(polarity):
    if polarity > 0.2:
        return 'Positive'
    elif polarity < -0.2:
        return 'Negative'
    else:
        return 'Neutral'

# apply categorization
df['sentiment'] = df['polarity'].apply(categorize_sentiment)

print(df['sentiment'].value_counts())

average_polarity = df['polarity'].mean()
print(f"The average polarity score is: {average_polarity}")

beats_reviews = df[df['brand'] == 'Beats']
average_beats_polarity = beats_reviews['polarity'].mean()
print(f"The average polarity score for Beats products is: {average_beats_polarity}")

from wordcloud import WordCloud

positive_reviews = " ".join(df[df['sentiment'] == 'Positive']['content'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(positive_reviews)

# display
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title=("Word Cloud for Positive Reviews")
plt.show()

df.to_csv('sentiment_analysis.csv', index=False)

from google.colab import files
files.download("sentiment_analysis.csv")

monthly_sentiment = df.groupby('year_month')['polarity'].mean().reset_index()
monthly_sentiment['year_month'] = monthly_sentiment['year_month'].astype(str)

display(monthly_sentiment.tail())

df['date'] = pd.to_datetime(df['date'])
df['year_month'] = df['date'].dt.to_period('M')

display(df.head())

plt.figure(figsize=(12, 6))
sns.lineplot(x='year_month', y='polarity', data=monthly_sentiment)
plt.title('Monthly Average Polarity Trend')
plt.xlabel('Month-Year')
plt.ylabel('Average Polarity')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(x='year_month', y='review_count', data=monthly_review_volume)
plt.title('Monthly Review Volume Trend')
plt.xlabel('Month-Year')
plt.ylabel('Review Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

monthly_review_volume = df.groupby('year_month').size().reset_index(name='review_count')
monthly_review_volume['year_month'] = monthly_review_volume['year_month'].astype(str)

display(monthly_review_volume.tail(8))

brands = ['Bose', 'Sony', 'Apple', 'Beats', 'Sennheiser', 'JBL', 'Skullcandy', 'Audio-Technica']

for brand in brands:
    brand_reviews = df[df['brand'] == brand]
    average_rating = brand_reviews['rating'].mean()
    total_reviews_brand = len(brand_reviews)

    print(f"Brand: {brand}")
    print(f"  Average Rating: {average_rating:.2f}")
    print(f"  Total Reviews: {total_reviews_brand}")
    print("-" * 20)

beats_ratings = df[df['brand'] == 'Beats']['rating'].mean()
bose_ratings = df[df['brand'] == 'Bose']['rating'].mean()
sony_ratings = df[df['brand'] == 'Sony']['rating'].mean()

print(f"Average rating for Beats: {beats_ratings:.2f}")
print(f"Average rating for Bose: {bose_ratings:.2f}")
print(f"Average rating for Sony: {sony_ratings:.2f}")

average_beats_subjectivity = beats_reviews['subjectivity'].mean()
print(f"The average subjectivity score for Beats products is: {average_beats_subjectivity}")

neutral_reviews_3_star = df[df['rating'] == 3]
num_neutral_reviews_3_star = len(neutral_reviews_3_star)
percentage_neutral_3_star = (num_neutral_reviews_3_star / total_reviews) * 100

print(f"The percentage of reviews with 3 stars is: {percentage_neutral_3_star:.2f}%")

low_rated_reviews = df[df['rating'] <= 2]
num_low_rated_reviews = len(low_rated_reviews)
percentage_low_rated = (num_low_rated_reviews / total_reviews) * 100

print(f"The percentage of reviews with 1 or 2 stars is: {percentage_low_rated:.2f}%")